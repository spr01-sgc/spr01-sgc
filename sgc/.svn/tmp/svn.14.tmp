/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.dao.impl;

import com.soma.transmisor.dao.HibernateDao;
import com.soma.transmisor.dao.PagoDao;
import com.soma.transmisor.model.BitacoraPago;
import com.soma.transmisor.model.Pago;
import com.soma.transmisor.model.PersonaFisica;
import com.soma.transmisor.model.PersonaMoral;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;
import javax.persistence.criteria.CriteriaQuery;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Projections;
import static org.hibernate.criterion.Projections.projectionList;
import static org.hibernate.criterion.Projections.sum;
import org.hibernate.criterion.Restrictions;
import org.hibernate.sql.JoinType;
import org.hibernate.transform.AliasToBeanResultTransformer;
import org.hibernate.type.StandardBasicTypes;
import org.springframework.stereotype.Repository;

/**
 *
 * @author LUIS-SOMA
 */
@Repository("pagoDao")
public class PagoDaoImpl extends HibernateDao<Integer, Pago> implements PagoDao {

    @Override
    public void update(Pago pago) {
        actualizar(pago);
        System.out.println("Se ha actualizado correctamente el pago " + pago);
    }

    @Override
    public void save(Pago pago) {
        guardar(pago);
        System.out.println("Se ha guardado correctamente el pago");
    }

    @Override
    public Pago buscaId(int pagoid) {
        Criteria criteria = creaCriteria();
        criteria.add(Restrictions.eq("pagoid", pagoid));
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        return (Pago) criteria.uniqueResult();
    }

    @Override
    public List<Pago> showPago() {
        Criteria criteria = creaCriteria();
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        List<Pago> lPago = criteria.list();
        return lPago;
    }

    @Override
    public List<Pago> showPagoRel(Date fechIn, Date fechTer) {
//retorna las operaciones relevantes con montos mayores a $5000 dolares
        List<Pago> clienteBenef = new ArrayList<>();
        List<Pago> pagos = new ArrayList<>();
        //Retorna los id de los clientes que han echo transacciones mayores a 5000
        SQLQuery clienteid = getSession().createSQLQuery("SELECT cl.clienteid \n"
                + "from bitapago b \n"
                + "INNER JOIN pago pa\n"
                + "ON b.pagoid_pagoid = pa.pagoid INNER JOIN cliente cl \n"
                + "ON cl.clienteid = pa.clienteid_clienteid \n"
                + "INNER JOIN personafisica pf\n"
                + "ON pf.clienteid_clienteid=cl.clienteid INNER JOIN persona pe \n"
                + "ON pe.personaid = pf.personaid_personaid  where\n"
                + "        b.fecha between '" + fechIn + "' and '" + fechTer + "' \n"
                + "        and pa.fechahoraregistro between '" + fechIn + "' and '" + fechTer + "'\n "
                + " GROUP BY clienteid"
                + " HAVING sum(cantidadenviada) > 5000");
        List<Integer> clientes = clienteid.list();
        Iterator iterator = clientes.iterator();
        while (iterator.hasNext()) {
            Integer id = (Integer) iterator.next();
//pasarid.add(i);

            System.out.println("trae " + id);
//muestra el cliente y beneficiario correpondiente
            /* SQLQuery beneficiarios = getSession().createSQLQuery("SELECT clienteid_clienteid,beneficiarioid_beneficiarioid\n"
                    + " FROM pago pa INNER JOIN cliente  cl\n"
                    + "ON pa.clienteid_clienteid= " + id + " \n"
                    + "INNER JOIN beneficiario bn \n"
                    + "ON bn.beneficiarioid=pa.beneficiarioid_beneficiarioid\n"
                    + "GROUP BY clienteid_clienteid,beneficiarioid_beneficiarioid ");*/
            // List<Pago> ben = beneficiarios.list();
            //clienteBenef.addAll(ben);
            //System.out.println("trae " + clienteBenef.toString());
            String queryC = "Select en.nombrecorto as OrganoSup,su.nosucursal,cd.nombre as localidad, cpS.clave as CodPostal,tips.clave as TipOperacion,\n"
                    + "im.clave as InstMone,(Select extract(YEAR from fechahoraregistro))||''||(Select extract(MONTH from fechahoraregistro))||''||(Select extract(Day from fechahoraregistro)) as fecha, pa.cantidadentregada as monto,md.nombremoneda, pais.nombre as Nacionalidad\n"
                    + ",perf.nombre,perf.apaterno,perf.amaterno,perf.curp,pf.fechanacimiento, dirCl.calle as Domicilio,\n"
                    + "dirCl.colonia,cdCl.nombre as Ciudad,actE.nombre as ActEcono \n"
                    + "FROM entidad en  \n"
                    + "INNER JOIN sucursal su  ON en.entidadid=su.entidadid_entidadid \n"
                    + "INNER JOIN persona pen  ON pen.personaid=en.personaid_personaid \n"
                    + "INNER JOIN direccion drE  ON drE.direccionid=en.direccionid_direccionid \n"
                    + "INNER JOIN direccion dirS on dirS.direccionid=su.direccionid_direccionid \n"
                    + "INNER JOIN ct_codigopostal cpS  ON cpS.codigopostalid=dirS.codigopostalid_codigopostalid \n"
                    + "INNER JOIN ct_ciudad cd  ON cd.ciudadid=cpS.ciudad_ciudadid INNER JOIN ct_estado est  \n"
                    + "ON est.estadoid=cd.estado_estadoid \n"
                    + "INNER JOIN ct_pais pais ON pais.paisid=est.pais_paisid \n"
                    + "INNER JOIN persona ps ON ps.personaid=su.personaid_personaid \n"
                    + "INNER JOIN usuario us  ON us.sucursalid_sucursalid=su.sucursalid \n"
                    + "INNER JOIN bitapago bp  ON bp.usuarioid_usuarioid=us.usuarioid \n"
                    + "INNER JOIN pago pa  ON pa.pagoid= bp.pagoid_pagoid \n"
                    + "INNER JOIN cliente cl  ON cl.clienteid="+id+"\n"
                    + "INNER JOIN ct_instrumentomonetario im  ON im.instmonetarioid=pa.instrumentomonetario_instmonetarioid INNER JOIN ct_tiposervicio ts  ON ts.tiposervicioid=pa.tiposervicioid_tiposervicioid \n"
                    + "INNER JOIN ct_monedadivisa md  ON md.monedadivisaid=pa.monedadivisaid_monedadivisaid \n"
                    + "INNER JOIN personafisica pf  ON pf.clienteid_clienteid=cl.clienteid \n"
                    + "INNER JOIN persona perf ON perf.personaid=pf.personaid_personaid \n"
                    + "INNER JOIN direccion dirCl ON dirCl.direccionid=cl.direccionid_direccionid \n"
                    + "INNER JOIN ct_codigopostal cpCl On cpCl.codigopostalid=dirCl.codigopostalid_codigopostalid \n"
                    + "INNER JOIN ct_ciudad cdCl On cdCl.ciudadid=cpCl.ciudad_ciudadid \n"
                    + "INNER JOIN ct_estado estCl ON estCl.estadoid=cdCl.estado_estadoid \n"
                    + "INNER JOIN ct_actividadeco actE On actE.actividadid=pf.actividadid_actividadid \n"
                    + "INNER JOIN ct_tiposervicio tips \n"
                    + "ON tips.tiposervicioid=pa.tiposervicioid_tiposervicioid ";
            SQLQuery clienRep = getSession().createSQLQuery(queryC);
            List<Pago> pago = clienRep.list();
            pagos.addAll(pago);
            System.out.println("Pagos " + pagos.toString());
        }

        SQLQuery query = getSession().createSQLQuery("SELECT cl.clave,sum(cantidadenviada) as Cant, sum(cantidadentregada),"
                + " (pe.nombre||' '||pe.apaterno||' '||pe.amaterno) as clientenombre, tp.descripcion,ins.nombre\n"
                + "from bitapago b \n"
                + "INNER JOIN pago pa\n"
                + "ON b.pagoid_pagoid = pa.pagoid INNER JOIN cliente cl \n"
                + "ON cl.clienteid = pa.clienteid_clienteid INNER JOIN ct_tiposervicio tp\n"
                + "ON tp.tiposervicioid=pa.tiposervicioid_tiposervicioid \n"
                + "INNER JOIN personafisica pf\n"
                + "ON pf.clienteid_clienteid=cl.clienteid INNER JOIN persona pe \n"
                + "ON pe.personaid = pf.personaid_personaid "
                + "INNER JOIN ct_instrumentomonetario ins \n"
                + "ON ins.instmonetarioid=pa.instrumentomonetario_instmonetarioid where\n"
                + "        b.fecha between '" + fechIn + "' and '" + fechTer + "' \n"
                + "        and pa.fechahoraregistro between '" + fechIn + "' and '" + fechTer + "'\n "
                + " GROUP BY clienteid,clientenombre,tp.descripcion,ins.nombre,cl.clave"
                + " HAVING sum(cantidadenviada) > 5000");
        List<Pago> lSumP = query.list();
        //  lSumP.addAll(clienteBenef);
        return pagos;
    }
}
