/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.controller;

import com.soma.transmisor.dao.TelefonoDao;
import com.soma.transmisor.model.CodigoPostal;
import com.soma.transmisor.model.Direccion;
import com.soma.transmisor.model.Entidad;
import com.soma.transmisor.model.Persona;
import com.soma.transmisor.model.Sexo;
import com.soma.transmisor.model.Telefono;
import com.soma.transmisor.model.TipoTelefono;
import com.soma.transmisor.service.CodigoPostalService;
import com.soma.transmisor.service.EntidadService;
import com.soma.transmisor.service.SexoService;
import com.soma.transmisor.service.TelefonoService;
import com.soma.transmisor.service.TipoTelefonoService;
import com.soma.transmisor.service.UsuarioService;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationTrustResolver;
import org.springframework.security.authentication.AuthenticationTrustResolverImpl;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Administra los accesos a los JSP
 *
 * @author Juan Luis Mendiola
 */
@Controller
@RequestMapping("/")
public class ControllerEntidad {

    @Autowired
    UsuarioService usuarioService;
    @Autowired
    EntidadService entidadService;
    @Autowired
    CodigoPostalService codigoPostalService;
    @Autowired
    SexoService sexoService;
    @Autowired
    TipoTelefonoService tipoTelefonoService;
    @Autowired
    TelefonoService telefonoService;

    @RequestMapping(value = {"/entidad"}, method = RequestMethod.GET)
    public String entidad(ModelMap model) {
        if (!estaUsuarioAnonimo()) {
            //trae los datos de la tabla entidad
            List<Entidad> lEntidad = entidadService.showEntidad();
            List<CodigoPostal> lCodigoPostal = codigoPostalService.showCodigoPostal();
            List<Sexo> lSexo = sexoService.showSexo();
            List<TipoTelefono> lTipoTelefono = tipoTelefonoService.showTipoTelefono();
            List<Telefono> lTelefono = telefonoService.showTelefono();
            // enviar los datos JSP
            model.addAttribute("lEntidad", lEntidad);
            model.addAttribute("lCodigoPostal", lCodigoPostal);
            model.addAttribute("lSexo", lSexo);
            model.addAttribute("lTipoTelefono", lTipoTelefono);
            model.addAttribute("lTelefono", lTelefono);

            return "entidad";
        }
        return "login";
    }

    /*
    *Método que sirve para dar de alta una Entidad Financiera
    *@Author Juan Luis Mendila Gutiérrez
     */
    @RequestMapping(value = "/entidad/agregarEntidad", method = RequestMethod.POST)
    public @ResponseBody
    String agregarEntidad(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {
            // creacion de objeto   
            TipoTelefono lTipoTelefono = tipoTelefonoService.buscaClave(Integer.parseInt(datos[13]));
            CodigoPostal lCodigoPostal = codigoPostalService
                    .buscaClave(Integer.parseInt(datos[6]));
            Sexo lSexo = sexoService.buscaClave(Integer.parseInt(datos[11]));
            Entidad entidad = new Entidad();
            Direccion direccion = new Direccion();
            Persona persona = new Persona();
            Telefono telefono = new Telefono();
            entidad.setRazonsocial(datos[0]);
            entidad.setNombrecorto(datos[1]);
            entidad.setCorreoelectronico(datos[2]);
            entidad.setRfc(datos[3]);

            direccion.setCalle(datos[4]);
            direccion.setColonia(datos[5]);
            direccion.setCodigopostalid(lCodigoPostal);

            persona.setNombre(datos[7]);
            persona.setApaterno(datos[8]);
            persona.setAmaterno(datos[9]);
            persona.setCurp(datos[10]);
            persona.setSexoid(lSexo);

            entidad.setDireccionid(direccion);
            entidad.setPersonaid(persona);

            telefono.setNumTelefono(datos[12]);
            telefono.setTipoid(lTipoTelefono);
            List<Telefono> lTelefonos = new ArrayList();
            lTelefonos.add(telefono);
            if (datos[17] != null && datos[16] != null) {//si hay un segundo numero
                TipoTelefono lTipoTelefono2 = tipoTelefonoService.buscaClave(Integer.parseInt(datos[17]));
                Telefono telefono2 = new Telefono();
                telefono2.setNumTelefono(datos[16]);
                telefono2.setTipoid(lTipoTelefono2);
                //se pasa a la lista de telefonos
                lTelefonos.add(telefono2);
            }
            entidad.setTelefonoid(lTelefonos);
//guarda en arreglo datos
            if (entidadService.save(entidad)) {
                return "exito";

            } else {
                return "error";
            }
        }
        return "errorAcceso";
    }

    /*
*Método que actualiza una entidad
*@Author Juan Luis Mendiola Gutiérrez
*@return
     */
    //Metodo para actualizar Entidad Financiera
    @RequestMapping(value = "/entidad/actualizarEntidad", method = RequestMethod.POST)
    public @ResponseBody
    String actualizarEntidad(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {
            List<Entidad> lEntidad = entidadService.showEntidad();
            CodigoPostal lCodigoPostal = codigoPostalService
                    .buscaClave(Integer.parseInt(datos[6]));
            Sexo lSexo = sexoService.buscaClave(Integer.parseInt(datos[11]));
            if (!lEntidad.isEmpty()) {
                for (Entidad entidad : lEntidad) {
                    if (entidad.getEntidadid() == Integer.parseInt(datos[12])) {
                        entidad.setRazonsocial(datos[0]);
                        entidad.setNombrecorto(datos[1]);
                        entidad.setCorreoelectronico(datos[2]);
                        entidad.setRfc(datos[3]);

                        entidad.getDireccionid().setCalle(datos[4]);
                        entidad.getDireccionid().setColonia(datos[5]);
                        entidad.getDireccionid().setCodigopostalid(lCodigoPostal);

                        entidad.getPersonaid().setNombre(datos[7]);
                        entidad.getPersonaid().setApaterno(datos[8]);
                        entidad.getPersonaid().setAmaterno(datos[9]);
                        entidad.getPersonaid().setCurp(datos[10]);
                        entidad.getPersonaid().setSexoid(lSexo);

                        if (entidadService.update(entidad)) {
                            return "exito";
                        } else {
                            return "error";
                        }
                    }
                }//end for
            }//si no esta vacia la lista de delitos
        }//el usuario es anonimo

        return "errorAcceso";

    }

    /*
    * Método que sirve para eliminar un entidad financiera
     */
    @RequestMapping(value = "/entidad/eliminarEntidad", method = RequestMethod.POST)
    public @ResponseBody
    String eliminarEntidad(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {
            for (String dato : datos) {
                if (dato.equals("")) {
                    // si hay datos vacios
                    return "errorDato";
                }
            }//termina de recorrer el arreglo

            List<Entidad> lEntidad = entidadService.showEntidad();
            if (!lEntidad.isEmpty()) {
                for (Entidad entidad : lEntidad) {
                    //obtiene el id de la sucursal a eliminar
                    int entidadid = Integer.parseInt(datos[0]);

                    if (entidad.getEntidadid() == entidadid) {

                        entidad.setEntidadid(Integer.parseInt(datos[0]));
                        if (entidadService.delete(entidadid)) {

                            return "exito";
                        } else {
                            return "error";
                        }
                    }
                }//end for
            }//si no esta vacia la lista de delitos
        }//el usuario es anonimo

        return "errorAcceso";

    }

    /**
     * Este metodo traera de la sesion iniciada.
     *
     * @return
     */
    public String usuarioEnSesion() {

        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        String nicknamePrincipal = null;

        if (principal instanceof UserDetails) {
            //Es igual al usuario que esta en sesion
            return nicknamePrincipal = ((UserDetails) principal).getUsername();
        } else {
            //Es igual a usuario anonimo
            return nicknamePrincipal = principal.toString();
        }
    }

    /**
     * Este metodo verificara que un usuario este autenticado correctamente
     */
    private boolean estaUsuarioAnonimo() {
        final Authentication autenticacion = SecurityContextHolder.getContext().getAuthentication();

        AuthenticationTrustResolver authenticationTrustResolver = new AuthenticationTrustResolverImpl();
        return authenticationTrustResolver.isAnonymous(autenticacion);
    }

}
