/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.controller;

import com.soma.transmisor.model.CodigoPostal;
import com.soma.transmisor.model.Direccion;
import com.soma.transmisor.model.Entidad;
import com.soma.transmisor.model.Persona;
import com.soma.transmisor.model.Sexo;
import com.soma.transmisor.model.Sucursal;
import com.soma.transmisor.model.Telefono;
import com.soma.transmisor.model.TipoTelefono;
import com.soma.transmisor.model.Usuario;
import com.soma.transmisor.service.CodigoPostalService;
import com.soma.transmisor.service.EntidadService;
import com.soma.transmisor.service.SexoService;
import com.soma.transmisor.service.SucursalService;
import com.soma.transmisor.service.TelefonoService;
import com.soma.transmisor.service.TipoTelefonoService;
import com.soma.transmisor.service.UsuarioService;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationTrustResolver;
import org.springframework.security.authentication.AuthenticationTrustResolverImpl;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 *
 * @author JUAN LUIS-SOMA
 */
@Controller
@RequestMapping("/")
public class ControllerSucursal {

    @Autowired
    UsuarioService usuarioService;
    @Autowired
    EntidadService entidadService;
    @Autowired
    CodigoPostalService codigoPostalService;
    @Autowired
    SexoService sexoService;
    @Autowired
    TipoTelefonoService tipoTelefonoService;
    @Autowired
    TelefonoService telefonoService;
    @Autowired
    SucursalService sucursalService;

    /**
     * MÃ©todo para la eliminaciÃ³n de una sucursal
     *
     * @Author Juan Luis Mendiola
     */
    @RequestMapping(value = {"/sucursal"}, method = RequestMethod.GET)
    public String sucursal(ModelMap model) {
        if (!estaUsuarioAnonimo()) {
            List<Sucursal> lSucursal = sucursalService.showSucursal();
            List<Entidad> lEntidad = entidadService.showEntidad();
            List<CodigoPostal> lCodigoPostal = codigoPostalService.showCodigoPostal();
            List<Sexo> lSexo = sexoService.showSexo();
            List<TipoTelefono> lTipoTelefono = tipoTelefonoService.showTipoTelefono();
            //List<Telefono> lTelefono = telefonoService.showTelefono();

            // enviar los datos JSPmodel.addAttribute("lSucursal", lSucursal);
            model.addAttribute("lEntidad", lEntidad);
            model.addAttribute("lCodigoPostal", lCodigoPostal);
            model.addAttribute("lSexo", lSexo);
            model.addAttribute("lTipoTelefono", lTipoTelefono);
            //model.addAttribute("lTelefono", lTelefono);
            model.addAttribute("lSucursal", lSucursal);

            return "sucursal";
        }
        return "login";
    }

    /**
     * @Author Juan Luis Mendiola
     * @param datos
     * @return exito cuando una sucursal fue guardada correctamente
     */
    @RequestMapping(value = "/sucursal/agregarSucursal", method = RequestMethod.POST)
    public @ResponseBody
    String agregarSucursal(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {
            // creacion de objeto   
            TipoTelefono lTipoTelefono = tipoTelefonoService.buscaClave(Integer.parseInt(datos[12]));
            CodigoPostal lCodigoPostal = codigoPostalService
                    .buscaClave(Integer.parseInt(datos[5]));
            Sexo lSexo = sexoService.buscaClave(Integer.parseInt(datos[10]));
            Entidad lEntidad = entidadService.buscaId(Integer.parseInt(datos[13]));
            Sucursal sucursal = new Sucursal();
            Direccion direccion = new Direccion();
            Persona persona = new Persona();
            Telefono telefono = new Telefono();

            sucursal.setNombresucursal(datos[0]);
            sucursal.setNosucursal(datos[1]);
            sucursal.setCorreoelectronico(datos[2]);

            direccion.setCalle(datos[3]);
            direccion.setColonia(datos[4]);
            direccion.setCodigopostalid(lCodigoPostal);

            persona.setNombre(datos[6]);
            persona.setApaterno(datos[7]);
            persona.setAmaterno(datos[8]);
            persona.setCurp(datos[9]);
            persona.setSexoid(lSexo);

            sucursal.setEntidadid(lEntidad);
            sucursal.setDireccionid(direccion);
            sucursal.setPersonaid(persona);

            telefono.setNumTelefono(datos[11]);
            telefono.setTipoid(lTipoTelefono);

            List<Telefono> lTelefonos = new ArrayList();
            lTelefonos.add(telefono);
            if (!datos[16].equals("0") && !datos[15].isEmpty()) {//SI hay un segundo numero
                TipoTelefono lTipoTelefono2 = tipoTelefonoService.buscaClave(Integer.parseInt(datos[16]));
                Telefono telefono2 = new Telefono();
                telefono2.setNumTelefono(datos[15]);
                telefono2.setTipoid(lTipoTelefono2);
                lTelefonos.add(telefono2);
            }
            sucursal.setTelefonoid(lTelefonos);
//guarda en arreglo datos
            if (sucursalService.save(sucursal)) {
                return "exito";

            } else {
                return "error";
            }
        }
        return "errorAcceso";
    }

    /*
*MÃ©todo que actualiza una sucursal
*@Author Juan Luis Mendiola GutiÃ©rrez
*@return
     */
    //Metodo para actualizar una Sucursal
    @RequestMapping(value = "/sucursal/actualizarSucursal", method = RequestMethod.POST)
    public @ResponseBody
    String actualizarSucursal(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {

            Entidad lEntidad = entidadService.buscaId(Integer.parseInt(datos[13]));
            CodigoPostal lCodigoPostal = codigoPostalService.buscaClave(Integer.parseInt(datos[5]));
            Sexo lSexo = sexoService.buscaClave(Integer.parseInt(datos[10]));
            List<Sucursal> lSucursal = sucursalService.showSucursal();

            if (!lSucursal.isEmpty()) {
                for (Sucursal sucursal : lSucursal) {
                    //obtiene el id de la sucursal a actualizar
                    int sucursalid = Integer.parseInt(datos[14]);
                    if (sucursal.getSucursalid() == sucursalid) {
                        sucursal.setNombresucursal(datos[0]);
                        sucursal.setNosucursal(datos[1]);
                        sucursal.setCorreoelectronico(datos[2]);

                        sucursal.getDireccionid().setCalle(datos[3]);
                        sucursal.getDireccionid().setColonia(datos[4]);
                        sucursal.getDireccionid().setCodigopostalid(lCodigoPostal);

                        sucursal.getPersonaid().setNombre(datos[6]);
                        sucursal.getPersonaid().setApaterno(datos[7]);
                        sucursal.getPersonaid().setAmaterno(datos[8]);
                        sucursal.getPersonaid().setCurp(datos[9]);
                        sucursal.getPersonaid().setSexoid(lSexo);
                        sucursal.setEntidadid(lEntidad);

                        TipoTelefono lTipoTelefono = tipoTelefonoService.buscaClave(Integer.parseInt(datos[12]));
                        Telefono telefonoid = telefonoService.buscaClave(Integer.parseInt(datos[15]));
                        int idtelefeno = Integer.parseInt(datos[15]);
                        if (telefonoid.getTelefonoid() == idtelefeno) {
                            telefonoid.setTipoid(lTipoTelefono);
                            telefonoid.setNumTelefono(datos[11]);
                            telefonoService.update(telefonoid);
                        }
                        List<Telefono> lTelefonos = new ArrayList();
                        lTelefonos.add(telefonoid);
                        if (!datos[17].equals("")) {
                            TipoTelefono lTipoTelefono2 = tipoTelefonoService.buscaClave(Integer.parseInt(datos[17]));
                            //sino hay lo crea
                            if (datos[18].equals("")) {
                                Telefono tel = new Telefono();
                                tel.setTipoid(lTipoTelefono2);
                                tel.setNumTelefono(datos[16]);
                                lTelefonos.add(tel);
                            } else {
                                Telefono telefonoid2 = telefonoService.buscaClave(Integer.parseInt(datos[18]));
                                int idtelefeno2 = Integer.parseInt(datos[18]);
                                if (telefonoid2.getTelefonoid() == idtelefeno2) {
                                    telefonoid2.setTipoid(lTipoTelefono2);
                                    telefonoid2.setNumTelefono(datos[16]);
                                    telefonoService.update(telefonoid2);
                                }
                                lTelefonos.add(telefonoid2);
                            }
                        }
                        sucursal.setTelefonoid(lTelefonos);

                        if (sucursalService.update(sucursal)) {

                            return "exito";
                        } else {
                            return "error";
                        }
                    }
                }//end for
            }//si no esta vacia la lista de sucursales
        }//el usuario es anonimo

        return "errorAcceso";

    }

    /*
    * MÃ©todo que sirve para eliminar un entidad financiera
     */
    @RequestMapping(value = "/sucursal/eliminarSucursal", method = RequestMethod.POST)
    public @ResponseBody
    String eliminarSucursal(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {
            for (String dato : datos) {
                if (dato.equals("")) {
                    // si hay datos vacios
                    return "errorDato";
                }
            }//termina de recorrer el arreglo

            List<Sucursal> lSucursal = sucursalService.showSucursal();
            if (!lSucursal.isEmpty()) {
                for (Sucursal sucursal : lSucursal) {
                    //obtiene el id de la sucursal a eliminar
                    int sucursalid = Integer.parseInt(datos[0]);

                    if (sucursal.getSucursalid() == sucursalid) {

                        sucursal.setSucursalid(Integer.parseInt(datos[0]));
                        if (sucursalService.delete(sucursalid)) {

                            return "exito";
                        } else {
                            return "error";
                        }
                    }
                }//end for
            }//si no esta vacia la lista de delitos
        }//el usuario es anonimo

        return "errorAcceso";

    }

    /**
     * Este metodo traera de la sesion iniciada.
     *
     * @return
     */
    public String usuarioEnSesion() {

        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        String nicknamePrincipal = null;

        if (principal instanceof UserDetails) {
            //Es igual al usuario que esta en sesion
            return nicknamePrincipal = ((UserDetails) principal).getUsername();
        } else {
            //Es igual a usuario anonimo
            return nicknamePrincipal = principal.toString();
        }
    }

    /**
     * Este metodo verificara que un usuario este autenticado correctamente
     */
    private boolean estaUsuarioAnonimo() {
        final Authentication autenticacion = SecurityContextHolder.getContext().getAuthentication();

        AuthenticationTrustResolver authenticationTrustResolver = new AuthenticationTrustResolverImpl();
        return authenticationTrustResolver.isAnonymous(autenticacion);
    }

    @RequestMapping(value = "/login", method = RequestMethod.POST)
    public @ResponseBody
    String tipoUsuario(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {
            for (String dato : datos) {
                if (dato.equals("")) {
                    // si hay datos vacios
                    return "errorDato";
                }
            }//termina de recorrer el arreglo
            String nick = datos[0];
            if (!nick.isEmpty()) {
                Usuario usuario = usuarioService.busquedaNinckname(nick);
                return usuario.getRol().getNombre();
            } else {
                return "error";
            }
        }//el usuario es anonimo

        return "errorAcceso";

    }
}
