/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.dao.impl;

import com.soma.transmisor.dao.HibernateDao;
import com.soma.transmisor.dao.TelefonoDao;
import com.soma.transmisor.model.Telefono;
import com.soma.transmisor.model.Usuario;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

/**
 *
 * @author JUAN LUIS-SOMA
 */
@Repository("telefonoDao")
public class TelefonoDaoImpl extends HibernateDao<Integer, Telefono> implements TelefonoDao {

    @Override
    public Telefono buscaClave(int telefonoid) {

        System.out.println(TelefonoDaoImpl.class + "\nBuscando Telefonos por Id: " + telefonoid);
        Criteria criteria = creaCriteria();

        criteria.add(Restrictions.eq("telefonoid", telefonoid));

        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);

        return (Telefono) criteria.uniqueResult();
    }

    @Override
    public List<Telefono> showTelefono() {
        //se crea el objeto criteria e inicia la consulta
        Criteria criteria = creaCriteria();
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);

        List<Telefono> lTelefono = criteria.list();
        return lTelefono;
    }

    @Override
    public void update(Telefono telefono) {
        actualizar(telefono);
    }

    @Override
    public List<Telefono> showTelU(List<Usuario> usTel) {
        List<Telefono> lTele = new ArrayList<>();
         List<Telefono> lTele2  = new ArrayList<>();
        for (Usuario usuario : usTel) {
            int usuarioid = usuario.getUsuarioid();
            Iterator query = getSession().createQuery(" FROM Usuario u join u.telefono ut WHERE u. usuarioid = " + usuarioid + "").list().iterator();
        
            if (query.hasNext()) {
                Object[] tuple = (Object[]) query.next();
                Usuario telefono = (Usuario) tuple[0];
                lTele.addAll(telefono.getTelefono());
                lTele2.addAll(lTele);
                System.out.println("Telefono usuario = " + telefono);
                 System.out.println("Telefono 2 usuario = " + lTele2);
            } //while

        
         //Forma número 1 (Uso de Maps).
        Map<Integer, Telefono> mapPersonas2 = new HashMap<Integer, Telefono>(lTele2.size());

        //Aquí está la magia
        for (Telefono p : lTele2) {
            mapPersonas2.put(p.getTelefonoid(), p);
        }

        //Agrego cada elemento del map a una nueva lista y muestro cada elemento.
    /*    System.out.println("Lista sin repetidos:");
        for (Entry<Integer, Telefono> p : mapPersonas2.entrySet()) {
            lTele2.add(p.getValue());
            System.out.println(p.getValue());
        }*/
    lTele =new  ArrayList();
        }//for     
         
        return lTele2;

    }
}
