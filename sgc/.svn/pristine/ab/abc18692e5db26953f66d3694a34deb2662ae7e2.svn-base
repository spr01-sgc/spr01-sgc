/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.dao.impl;

import com.soma.transmisor.dao.HibernateDao;
import com.soma.transmisor.dao.UsuarioDao;
import com.soma.transmisor.model.Usuario;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

/**
 *
 * @author estadias2017-2
 */
@Repository("usuarioDao")
public class UsuarioDaoImpl extends HibernateDao<Integer, Usuario> implements UsuarioDao {

    @Override
    public void save(Usuario usuario) {
        guardar(usuario);
    }

    @Override
    public void update(Usuario usuario) {
        actualizar(usuario);
    }

    @Override
    public Usuario busquedaId(int usuarioId) {
        Usuario usuario = getPorId(usuarioId);
        return usuario;
    }

    @Override
    public Usuario busquedaNinckname(String nickname) {
        Criteria criteria = creaCriteria();

        criteria.add(Restrictions.eq("nickname", nickname));
        System.out.println(UsuarioDaoImpl.class + "\nBuscando Usuario por nickname: " + nickname);

        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);

        return (Usuario) criteria.uniqueResult();
    }

    @Override
    public List<Usuario> showUsuario() {
        //Cargar los usuarios que pertenecen a esa sucursal
        //SELECT u.nickname, usuarioid FROM usuario_sucursal  INNER JOIN usuario as u
        //ON usuario_usuarioid=u.usuarioid;
        //acceso a tabla 
        //select * from usuario inner join usuario_sucursal as us
        //on usuarioid=us.usuario_usuarioid
        //inner join usuario_telefonoas t
        //on usuarioid=t.usuario_usuarioid
        Criteria criteria = creaCriteria();
        //acceso a tabla sucursal
        /* criteria.createAlias("sucursalid", "su");
       criteria.add(Restrictions.idEq("sucursalid"));
               //eq("su.sucursalid", 1));
        criteria.createAlias("telefono", "te");
        criteria.add(Restrictions.idEq("telefonoid"));
        //("te.telefonoid",6));
        /*criteria.setProjection(Projections.projectionList().add(Projections.property("sucursalid")));
         criteria.setProjection(Projections.projectionList().add(Projections.property("telefonoid")));*/
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);

        List<Usuario> lUsuario = criteria.list();

        return lUsuario;

    }

    @Override
    public void delete(int usuarioid) {
        Criteria crit = creaCriteria();
        crit.add(Restrictions.eq("usuarioid", usuarioid));
        Usuario usuario = (Usuario) crit.uniqueResult();
        eliminar(usuario);
        System.out.print(GiroDaoImpl.class + "Se ha eliminado correctamente el usuario" + usuarioid);
    }

    @Override
    public List<Usuario> showUsuarioS(Usuario usuarioSu) {
         Criteria criteria = getSession().createCriteria(Usuario.class)
        .createCriteria("sucursalid")
                 .add(Restrictions.eq("sucursalid", usuarioSu.getSucursalid().getSucursalid()))
                 ;            
       List<Usuario> lUsuarioS = criteria.list();
       
 
        return lUsuarioS;
      
    }



}
