/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.dao.impl;

import com.soma.transmisor.dao.ClienteDao;
import com.soma.transmisor.dao.HibernateDao;
import com.soma.transmisor.model.Cliente;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

/**
 *
 * @author LUIS-SOMA
 */
@Repository("clienteDao")
public class ClienteDaoImpl extends HibernateDao<Integer, Cliente> implements ClienteDao {

    @Override
    public Cliente buscaCLave(String clave) {
        Criteria criteria = creaCriteria();
        criteria.add(Restrictions.eq("clave", clave));
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        return (Cliente) criteria.uniqueResult();
    }

    @Override
    public Cliente clave() {
        Query query = getSession().createQuery("FROM Cliente \n"
                + " WHERE clave = (SELECT MAX(clave) from Cliente)");
        return (Cliente) query.uniqueResult();
    }

    @Override
    public Cliente buscaRFC(String rfc) {
        Criteria criteria = creaCriteria();
        criteria.add(Restrictions.eq("rfc", rfc));
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        return (Cliente) criteria.uniqueResult();
    }

    @Override
    public List<Cliente> showCliente(int clienteid) {
        SQLQuery movimientos = getSession().createSQLQuery("Select clienteid,persona.nombre||' '||apaterno||' '||amaterno as nomCom,curp,rfc,tpiden.nombre\n"
                + ",pf.fechanacimiento,sexo.descripcion,clavepago,\n"
                + "sum(cantidadentregada) as x_mes,count(pagoid)as pagos,actieco.nombre as Acti,\n"
                + "max(bp.fecha)as fechPa,\n"
                + "sucursal.nombresucursal as Sucu,direccion.calle,direccion.colonia\n"
                + "From pago INNER JOIN cliente cl\n"
                + "on cl.clienteid=pago.clienteid_clienteid\n"
                + "INNER JOIN bitapago bp ON bp.pagoid_pagoid=pago.pagoid\n"
                + "INNER JOIN ct_estatus_pago estp ON estp.estatusid=bp.estatusid_estatusid\n"
                + "INNER JOIN personafisica pf ON pf.clienteid_clienteid=cl.clienteid\n"
                + "inner JOIN persona on pf.personaid_personaid=persona.personaid\n"
                + "inner join ct_sexo sexo on sexo.sexoid=persona.sexoid_sexoid\n"
                + "inner join usuario on usuario.usuarioid=bp.usuarioid_usuarioid\n"
                + "inner join sucursal on sucursal.sucursalid=usuario.sucursalid_sucursalid\n"
                + "inner join ct_actividadeco actieco on actieco.actividadid=pf.actividadid_actividadid \n"
                + "INNER JOIN ct_tipoident tpiden on tpiden.identificacionid=pf.tipoidentidadid_identificacionid\n"
                + "INNER join direccion on direccion.direccionid=cl.direccionid_direccionid\n"
                + "WHERE   bp.fecha>= (current_date - interval '6 month')\n"
                + "and bp.fecha<=(current_date) \n"
                + "and estp.descripcion='Pagado' and cl.clienteid=" + clienteid + " \n"
                + "GROUP BY clienteid,clavepago,pf.fechanacimiento,bp.fecha,sexo.descripcion,nomCom,curp\n"
                + ",actieco.nombre,tpiden.nombre,rfc,direccion.calle,direccion.colonia,nombresucursal");
        List<Cliente> lPerfil = movimientos.list();
        return lPerfil;
    }

    @Override
    public List<Float> perfilTransaccional(int clienteid, double porcentaje) {
        String limite = "Select (sum(cantidadentregada)*" + porcentaje + "" + ")+sum(cantidadentregada) as Limite,\n"
                + "sum(cantidadentregada) as x_mes\n"
                + "From cliente cl \n"
                + "inner join pago on pago.clienteid_clienteid=cl.clienteid\n"
                + "inner join bitapago bp on bp.pagoid_pagoid=pago.pagoid\n"
                + "inner join ct_estatus_pago estp on estp.estatusid=bp.estatusid_estatusid\n"
                + "inner join personafisica pefi \n"
                + "on cl.clienteid=pefi.clienteid_clienteid\n"
                + "where bp.fecha>= (current_date - interval '6 month')\n"
                + "and bp.fecha<=(current_date)\n"
                + "and estp.descripcion='Pagado' and cl.clienteid=" + clienteid + "\n"
                + "GROUP BY clienteid";
        SQLQuery perfil = getSession().createSQLQuery(limite);
        List<Float> lLimite = perfil.list();
        return lLimite;
    }

    @Override
    public Cliente buscaCliente(int clienteId) {
        Criteria criteria = creaCriteria();
        criteria.add(Restrictions.eq("clienteid", clienteId));
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        return (Cliente) criteria.uniqueResult();
    }

}
