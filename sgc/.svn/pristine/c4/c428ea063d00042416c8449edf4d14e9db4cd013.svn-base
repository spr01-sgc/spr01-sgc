/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.dao.impl;

import com.soma.transmisor.dao.ClienteDao;
import com.soma.transmisor.dao.HibernateDao;
import com.soma.transmisor.model.Cliente;
import java.util.Iterator;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

/**
 *
 * @author LUIS-SOMA
 */
@Repository("clienteDao")
public class ClienteDaoImpl extends HibernateDao<Integer, Cliente> implements ClienteDao {

    @Override
    public Cliente buscaCLave(String clave) {
        Criteria criteria = creaCriteria();
        criteria.add(Restrictions.eq("clave", clave));
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        return (Cliente) criteria.uniqueResult();
    }

    @Override
    public Cliente clave() {
        Query query = getSession().createQuery("FROM Cliente \n"
                + " WHERE clave = (SELECT MAX(clave) from Cliente)");
        return (Cliente) query.uniqueResult();
    }

    @Override
    public Cliente buscaRFC(String rfc) {
        Criteria criteria = creaCriteria();
        criteria.add(Restrictions.eq("rfc", rfc));
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        return (Cliente) criteria.uniqueResult();
    }

    @Override
    public List<Cliente> showCliente(int clienteId, int estatusPago) {
        String cantidad = "cantidadenviada";
        if (estatusPago == 1) {
            cantidad = "cantidadentregada";
        }
        SQLQuery movimientos = getSession().createSQLQuery("Select clienteid,persona.nombre||' '||apaterno||' '||amaterno as nomCom,curp,rfc,tpiden.nombre\n"
                + ",pf.fechanacimiento,sexo.descripcion,clavepago,\n"
                + "sum(" + cantidad + ") as x_mes,count(pagoid)as pagos,actieco.nombre as Acti,\n"
                + "max(bp.fecha)as fechPa,\n"
                + "sucursal.nombresucursal as Sucu,direccion.calle,direccion.colonia,\n"
                + "cpF.clave as cp,cd.nombre as ciudad,estado.nombre as estado,pais.nombre as pais\n"
                + "From pago INNER JOIN cliente cl\n"
                + "on cl.clienteid=pago.beneficiariocliente_clienteid\n"
                + "INNER JOIN bitapago bp ON bp.pagoid_pagoid=pago.pagoid\n"
                + "INNER JOIN ct_estatus_pago estp ON estp.estatusid=bp.estatusid_estatusid\n"
                + "INNER JOIN personafisica pf ON pf.clienteid_clienteid=cl.clienteid\n"
                + "inner JOIN persona on pf.personaid_personaid=persona.personaid\n"
                + "inner join ct_sexo sexo on sexo.sexoid=persona.sexoid_sexoid\n"
                + "inner join usuario on usuario.usuarioid=bp.usuarioid_usuarioid\n"
                + "inner join sucursal on sucursal.sucursalid=usuario.sucursalid_sucursalid\n"
                + "inner join ct_actividadeco actieco on actieco.actividadid=pf.actividadid_actividadid \n"
                + "INNER JOIN ct_tipoident tpiden on tpiden.identificacionid=pf.tipoidentidadid_identificacionid\n"
                + "INNER join direccion on direccion.direccionid=cl.direccionid_direccionid\n"
                + "INNER JOIN ct_codigopostal cpF ON cpF.codigopostalid=direccion.codigopostalid_codigopostalid\n"
                + "INNER JOIN ct_ciudad cd On cd.ciudadid=cpF.ciudad_ciudadid\n"
                + "INNER JOIN ct_estado estado on estado.estadoid=cd.estado_estadoid\n"
                + "INNER JOIN ct_pais pais ON pais.paisid=estado.pais_paisid\n"
                + "WHERE bp.estatusid_estatusid=" + estatusPago + " and cl.clienteid=" + clienteId + " \n"
                + "GROUP BY clienteid,clavepago,pf.fechanacimiento,bp.fecha,sexo.descripcion,nomCom,curp\n"
                + ",actieco.nombre,tpiden.nombre,rfc,direccion.calle,direccion.colonia,"
                + "nombresucursal,cpF.clave,cd.nombre,estado.nombre,pais.nombre\n"
                + "ORDER BY fecha desc ");
        List<Cliente> lMovimeintos = movimientos.list();
        return lMovimeintos;
    }

    @Override
    public List<Float> perfilTransaccional(int clienteId, double porcentaje, int estatusPago) {
        String cantidad = "cantidadenviada";
        if (estatusPago == 1) {
            cantidad = "cantidadentregada";
        }
        String limite = "Select (sum(" + cantidad + ")*" + porcentaje + ")+sum(" + cantidad + ") as Limite\n"
                + "From bitapago bp \n"
                + "INNER JOIN pago\n"
                + "on bp.pagoid_pagoid=pago.pagoid\n"
                + "INNER JOIN ct_estatus_pago estpa\n"
                + "on estpa.estatusid=bp.estatusid_estatusid\n"
                + "INNER JOIN cliente cl\n"
                + "on cl.clienteid=pago.beneficiariocliente_clienteid\n"
                + "where estatusid=" + estatusPago + "  and bp.estatus='f' and clienteid=" + clienteId + "\n"
                + "GROUP BY clienteid,estatusid\n"
                + "HAVING CURRENT_DATE-Min(fecha) BETWEEN 180 and 182";
        SQLQuery perfil = getSession().createSQLQuery(limite);
        List<Float> lLimite = perfil.list();
        /*Para actualizar los pagos que ya se calcularon se pasa el pagoId,estus del pago*/
        if (!lLimite.isEmpty()) {
            SQLQuery pagosId = getSession().createSQLQuery("Select pagoid\n"
                    + "From bitapago bp \n"
                    + "INNER JOIN pago\n"
                    + "on bp.pagoid_pagoid=pago.pagoid\n"
                    + "INNER JOIN ct_estatus_pago estpa\n"
                    + "on estpa.estatusid=bp.estatusid_estatusid\n"
                    + "INNER JOIN cliente cl\n"
                    + "on cl.clienteid=pago.beneficiariocliente_clienteid\n"
                    + "where estatusid=" + estatusPago + "  and bp.estatus='f' and clienteid=" + clienteId + "\n"
                    + "GROUP BY pagoid,fecha\n"
                    + "HAVING bp.fecha <=CURRENT_DATE and bp.fecha >= min(fecha)");
            List<Integer> pagoId = pagosId.list();
            Iterator iterator = pagoId.iterator();
            while (iterator.hasNext()) {//id de los pagos
                int pagoid = (int) iterator.next();
                SQLQuery updateEstatus = getSession().createSQLQuery(
                        "Update bitapago set estatus='t' where estatus='f' and pagoid_pagoid=" + pagoid + "");
                updateEstatus.executeUpdate();
            }//while
            System.out.println("perfil: " + lLimite.iterator().next());
            Object prueba = lLimite.iterator().next();
            SQLQuery insertLimite = getSession().createSQLQuery("INSERT INTO perfil_cliente(limite,fecha,clienteid_clienteid)\n"
                    + "VALUES(" + prueba + ",now()," + clienteId + ");");
            insertLimite.executeUpdate();
        } else {
            SQLQuery mostrarPerfil = getSession().createSQLQuery("SELECT limite From perfil_cliente "
                    + "where clienteid_clienteid=" + clienteId + " and fecha=(select max(fecha) from perfil_cliente where clienteid_clienteid=" + clienteId + ")");
            List<Float> lmostrarPerfil = mostrarPerfil.list();
            if (!lmostrarPerfil.isEmpty()) {
                return lmostrarPerfil;
            } else {
                List<Float> Slimite = null;
                return Slimite;
            }
        }

        return lLimite;
    }

    @Override
    public Cliente buscaCliente(int clienteId) {
        Criteria criteria = creaCriteria();
        criteria.add(Restrictions.eq("clienteid", clienteId));
        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        return (Cliente) criteria.uniqueResult();
    }

}
