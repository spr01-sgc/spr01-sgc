/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.controller;

import com.soma.transmisor.dao.PersonaFisicaDao;
import com.soma.transmisor.model.ActividadEco;
import com.soma.transmisor.model.Beneficiario;
import com.soma.transmisor.model.BitacoraPago;
import com.soma.transmisor.model.CausaRechazo;
import com.soma.transmisor.model.Ciudad;
import com.soma.transmisor.model.Cliente;
import com.soma.transmisor.model.CodigoPostal;
import com.soma.transmisor.model.Comision;
import com.soma.transmisor.model.Direccion;
import com.soma.transmisor.model.EmisoraOrdenante;
import com.soma.transmisor.model.EstatusIdentificacion;
import com.soma.transmisor.model.EstatusPago;
import com.soma.transmisor.model.Giro;
import com.soma.transmisor.model.InstrumentoMonetario;
import com.soma.transmisor.model.MonedaDivisa;
import com.soma.transmisor.model.Pago;
import com.soma.transmisor.model.Persona;
import com.soma.transmisor.model.PersonaFisica;
import com.soma.transmisor.model.PersonaMoral;
import com.soma.transmisor.model.Sexo;
import com.soma.transmisor.model.Sucursal;
import com.soma.transmisor.model.TipoIdentidad;
import com.soma.transmisor.model.TipoServicio;
import com.soma.transmisor.model.TipoTelefono;
import com.soma.transmisor.model.Usuario;
import com.soma.transmisor.model.ValorMoneda;
import com.soma.transmisor.service.ActividadEconomicaService;
import com.soma.transmisor.service.BitacoraPagoService;
import com.soma.transmisor.service.CiudadService;
import com.soma.transmisor.service.ClienteService;
import com.soma.transmisor.service.CodigoPostalService;
import com.soma.transmisor.service.EstatusIdentificacionService;
import com.soma.transmisor.service.EstatusPagoService;
import com.soma.transmisor.service.GiroService;
import com.soma.transmisor.service.InstrumentoMonetarioService;
import com.soma.transmisor.service.MonedaDivisaService;
import com.soma.transmisor.service.PagoService;
import com.soma.transmisor.service.PersonaFisicaService;
import com.soma.transmisor.service.PersonaMoralService;
import com.soma.transmisor.service.PersonaService;
import com.soma.transmisor.service.SexoService;
import com.soma.transmisor.service.SucursalService;
import com.soma.transmisor.service.TipoServicioService;
import com.soma.transmisor.service.TipoTelefonoService;
import com.soma.transmisor.service.TiposIdentidadService;
import com.soma.transmisor.service.UsuarioService;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Formatter;
import java.util.Iterator;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationTrustResolver;
import org.springframework.security.authentication.AuthenticationTrustResolverImpl;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Administra los accesos a los JSP
 *
 * @author Luis Mendiola
 */
@Controller
@RequestMapping("/")
public class ControllerEnvios {

    @Autowired
    CodigoPostalService codigoPostalService;
    @Autowired
    SexoService sexoService;
    @Autowired
    TipoTelefonoService tipoTelefonoService;
    @Autowired
    InstrumentoMonetarioService instrumentomonetarioService;
    @Autowired
    MonedaDivisaService monedaDivisaService;
    @Autowired
    TipoServicioService tipoServicioService;
    @Autowired
    GiroService giroService;
    @Autowired
    ActividadEconomicaService actividadEconomicaService;
    @Autowired
    TiposIdentidadService tipoIdentidadService;
    @Autowired
    EstatusIdentificacionService estatusIdentificacionService;
    @Autowired
    CiudadService ciudadService;
    @Autowired
    PagoService pagoService;
    @Autowired
    SucursalService sucursalService;
    @Autowired
    ClienteService clienteService;
    @Autowired
    PersonaFisicaService personaFisicaService;
    @Autowired
    ClienteService clienteServiceClave;
    @Autowired
    PersonaService personaService;
    @Autowired
    PersonaMoralService personaMoralService;

    @RequestMapping(value = {"/envios"}, method = RequestMethod.GET)
    public String envios(ModelMap model) {
        if (!estaUsuarioAnonimo()) {
            //trae los datos de la tabla entidad
            List<InstrumentoMonetario> lInstrumentoMonetario = instrumentomonetarioService.showInstrumento();
            List<MonedaDivisa> lMonedaDivisa = monedaDivisaService.showMonedaDivisa();
            List<TipoServicio> lTipoServicio = tipoServicioService.showTipoServicio();
            List<Giro> lGiro = giroService.showGiro();
            List<ActividadEco> lActividadEconomica = actividadEconomicaService.showActividadEconomica();
            List<TipoIdentidad> lTipoIdentidad = tipoIdentidadService.showTipoIdentidad();
            List<EstatusIdentificacion> lEstatusIdentificacion = estatusIdentificacionService.showEstatusIdentficacion();
            List<CodigoPostal> lCodigoPostal = codigoPostalService.showCodigoPostal();
            List<Sexo> lSexo = sexoService.showSexo();
            List<TipoTelefono> lTipoTelefono = tipoTelefonoService.showTipoTelefono();
            List<Ciudad> lCiudad = ciudadService.showCiudad();
            // enviar los datos JSP
            model.addAttribute("lCodigoPostal", lCodigoPostal);
            model.addAttribute("lSexo", lSexo);
            model.addAttribute("lTipoTelefono", lTipoTelefono);
            model.addAttribute("lCiudad", lCiudad);
            model.addAttribute("lInstrumentoMonetario", lInstrumentoMonetario);
            model.addAttribute("lModendaDivisa", lMonedaDivisa);
            model.addAttribute("lTipoServicio", lTipoServicio);
            model.addAttribute("lGiro", lGiro);

            model.addAttribute("lActividadEconomica", lActividadEconomica);
            model.addAttribute("lTipoIdentidad", lTipoIdentidad);
            model.addAttribute("lEstatusIdentificacion", lEstatusIdentificacion);

            return "envios";
        }
        return "login";
    }

    @RequestMapping(value = "/envios/registrarEnvio", method = RequestMethod.POST)
    public @ResponseBody
    String registrarEnvio(@RequestParam(value = "datos[]") String datos[]) throws ParseException {
        if (!estaUsuarioAnonimo()) {
            Pago pago = new Pago();
            ValorMoneda valormoneda = new ValorMoneda();
            Date fecha = new Date();
            Beneficiario beneficiario = new Beneficiario();
            Persona personaBene = new Persona();

            MonedaDivisa lMonedaDivisa
                    = monedaDivisaService.buscaMonedaDivisa(Integer.parseInt(datos[1]));
            InstrumentoMonetario lInstrumento
                    = instrumentomonetarioService.buscaClave(Integer.parseInt(datos[3]));
            TipoServicio lTipoServicio
                    = tipoServicioService.buscaTipoServicio(Integer.parseInt(datos[4]));
            Sexo lSexoBeneficiario
                    = sexoService.buscaClave(Integer.parseInt(datos[9]));

            Cliente clienteExistente = null;
            if (datos[10] != "") {
                //El arreglo datos en la posición 10 trae la clave  o número de 
                //cuenta de una Persona Física
                clienteExistente = clienteService.buscaClave(datos[10]);
            } else {
                //El arreglo datos en la posición 28 trae la clave   o número de 
                //cuenta de una Persona Moral
                clienteExistente = clienteService.buscaClave(datos[28]);
            }

            //datos que se insertan en la tabla pago
            pago.setCantidadenviada(Integer.parseInt(datos[0]));
            pago.setCantidadentregada(100);//este valor va a cambiar
            //Falta mandar llamar el metodo que me generé la clave del pago
            pago.setClavepago("K1234567890");
            pago.setFechahoraregistro(fecha);
            pago.setMonedadivisaid(lMonedaDivisa);
            pago.setInstrumentomonetario(lInstrumento);
            pago.setTiposervicioid(lTipoServicio);
            valormoneda.setFecha(fecha);
            valormoneda.setMonto(datos[2]);
            pago.setValormonedaid(valormoneda);

            //Datos del beneficiario
            personaBene.setNombre(datos[5]);
            personaBene.setApaterno(datos[6]);
            personaBene.setAmaterno(datos[7]);
            personaBene.setCurp(datos[8]);
            personaBene.setSexoid(lSexoBeneficiario);
            beneficiario.setPersonaid(personaBene);
            pago.setBeneficiarioid(beneficiario);

            //Datos del cliente
            if (clienteExistente == null) {
                Cliente cliente = generaCliente(datos);
                pago.setClienteid(cliente);
            } else {
                Cliente cliente = actualizaClienteFisica(datos).getClienteid();
                pago.setClienteid(cliente);
            }
            if (pagoService.save(pago)) {
                return "exito";

            } else {
                return "error";
            }
        }
        return "errorAcceso";
    }

    public Cliente generaCliente(String datos[]) throws ParseException {
        Cliente cliente = new Cliente();
        Direccion direccionCliente = new Direccion();
        PersonaFisica personaF = new PersonaFisica();
        PersonaMoral personaMoral = new PersonaMoral();
        Persona personaMor = new Persona();
        Persona personaFisica = new Persona();
        CodigoPostal cpCliente = null;
        Sexo lSexo = null;
        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
        String strFecha;
        String claveUsuario = "";
        Date fechaNacimientoFisica = null;
        Date fechaConstitucion = null;
        Giro giro = null;
        ActividadEco actividad = null;
        EstatusIdentificacion estatusIdentificacion = null;
        TipoIdentidad tipoIdentidad = null;

        //Condicón que obtiene el código postal y sexo de un cliente física o moral    
        if (Integer.parseInt(datos[15]) != 0
                && Integer.parseInt(datos[22]) != 0) {
            //Código postal y sexo de la persona física
            cpCliente = codigoPostalService.buscaClave(Integer.parseInt(datos[15]));
            lSexo = sexoService.buscaClave(Integer.parseInt(datos[22]));
            actividad = actividadEconomicaService
                    .buscaActividadEconomica(Integer.parseInt(datos[25]));
            estatusIdentificacion = estatusIdentificacionService
                    .buscaEstatusIdentificacion(Integer.parseInt(datos[24]));
            tipoIdentidad = tipoIdentidadService
                    .buscaTipoIdentidad(Integer.parseInt(datos[23]));

        } else {
            //Código postal y sexo de la persona moral
            cpCliente = codigoPostalService.buscaClave(Integer.parseInt(datos[38]));
            lSexo = sexoService.buscaClave(Integer.parseInt(datos[33]));
            giro = giroService.buscaId(Integer.parseInt(datos[42]));
        }

        claveUsuario = generaClave();
        cliente.setClave(claveUsuario);

        if (!datos[11].equals("") && !datos[12].equals("")
                && !datos[13].equals("") && !datos[14].equals("")) {
            cliente.setCorreoelectronico(datos[11]);
            cliente.setRfc(datos[12]);
            direccionCliente.setCalle(datos[13]);
            direccionCliente.setColonia(datos[14]);
            direccionCliente.setCodigopostalid(cpCliente);
        } else {
            cliente.setCorreoelectronico(datos[34]);
            cliente.setRfc(datos[35]);
            direccionCliente.setCalle(datos[36]);
            direccionCliente.setColonia(datos[37]);
            direccionCliente.setCodigopostalid(cpCliente);
        }

        cliente.setDireccionid(direccionCliente);

        if (!datos[17].equals("")) {
            strFecha = datos[17];
            fechaNacimientoFisica = formatoFecha.parse(strFecha);
        } else {
            strFecha = datos[40];
            fechaConstitucion = formatoFecha.parse(strFecha);
        }

        //Datos de la persona física 
        personaF.setIdentificacionoficial(datos[16]);
        personaF.setFechanacimiento(fechaNacimientoFisica);
        personaFisica.setNombre(datos[18]);
        personaFisica.setApaterno(datos[19]);
        personaFisica.setAmaterno(datos[20]);
        personaFisica.setCurp(datos[21]);
        personaFisica.setSexoid(lSexo);
        personaF.setPersonaid(personaFisica);
        personaF.setActividadid(actividad);
        personaF.setEstatusidentificacionid(estatusIdentificacion);
        personaF.setTipoidentidadid(tipoIdentidad);
        personaF.setClienteid(cliente);

        //Datos de la persona Moral
        personaMoral.setFechaconstitucion(fechaConstitucion);
        personaMoral.setNumerofirmaavanzada(datos[41]);
        personaMoral.setRazonsocial(datos[39]);
        personaMoral.setClienteid(cliente);
        personaMoral.setGiroid(giro);
        personaMor.setNombre(datos[29]);
        personaMor.setApaterno(datos[30]);
        personaMor.setAmaterno(datos[31]);
        personaMor.setCurp(datos[32]);
        personaMor.setSexoid(lSexo);
        List<Persona> lPersonas = new ArrayList<>();
        lPersonas.add(personaMor);
        personaMoral.setPersonaid(lPersonas);

        if (!personaF.getIdentificacionoficial().equals("")) {
            personaFisicaService.save(personaF);
            return personaF.getClienteid();
        } else {
            personaMoralService.save(personaMoral);
            return personaMoral.getClienteid();
        }
    }

    public PersonaFisica actualizaClienteFisica(String datos[]) throws ParseException {

        Cliente clienteExistente = clienteService.buscaClave(datos[10]);
        int clienteid = clienteExistente.getClienteid();
        PersonaFisica personaFisica = personaFisicaService.buscaCliente(clienteid);

        CodigoPostal cpCliente
                = codigoPostalService.buscaClave(Integer.parseInt(datos[15]));
        Sexo lSexoFisica
                = sexoService.buscaClave(Integer.parseInt(datos[22]));
        ActividadEco actividad
                = actividadEconomicaService.buscaActividadEconomica(Integer.parseInt(datos[25]));
        EstatusIdentificacion estatusIdentificacion
                = estatusIdentificacionService.buscaEstatusIdentificacion(Integer.parseInt(datos[24]));
        TipoIdentidad tipoIdentidad
                = tipoIdentidadService.buscaTipoIdentidad(Integer.parseInt(datos[23]));

        personaFisica.getClienteid().setCorreoelectronico(datos[11]);
        personaFisica.getClienteid().setRfc(datos[12]);
        personaFisica.getClienteid().getDireccionid().setCalle(datos[13]);
        personaFisica.getClienteid().getDireccionid().setColonia(datos[14]);
        personaFisica.getClienteid().getDireccionid().setCodigopostalid(cpCliente);

        personaFisica.setIdentificacionoficial(datos[16]);
        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
        String strFecha = datos[17];
        Date fechaNacimientoFisica;
        fechaNacimientoFisica = formatoFecha.parse(strFecha);
        personaFisica.setFechanacimiento(fechaNacimientoFisica);
        personaFisica.getPersonaid().setNombre(datos[18]);
        personaFisica.getPersonaid().setApaterno(datos[19]);
        personaFisica.getPersonaid().setAmaterno(datos[20]);
        personaFisica.getPersonaid().setCurp(datos[21]);
        personaFisica.getPersonaid().setSexoid(lSexoFisica);

        personaFisica.setActividadid(actividad);
        personaFisica.setEstatusidentificacionid(estatusIdentificacion);
        personaFisica.setTipoidentidadid(tipoIdentidad);

        if (personaFisicaService.update(personaFisica)) {
            return personaFisica;
        } else {
            return personaFisica;
        }

    }

    /**
     *
     * @param datos
     * @return retorna un arreglo de cadena con los datos de un cliente en caso
     * de que este exista
     */
    @RequestMapping(value = "/envios/detectaCambio", method = RequestMethod.POST)
    public @ResponseBody
    String[] detectaCambio(@RequestParam(value = "datos[]") String datos[]) {
        String datosPersona[] = new String[20];
        String codP = "";
        int cp2 = 0;
        String filtro = "";
        String filtroBusqueda = datos[0];
        Integer id = 0;
        PersonaFisica personaFisica = null;
        PersonaMoral personaMoral = null;
        List<String> lPersonaMoral = new ArrayList<>();
        if (filtroBusqueda.equals("clavePersonaFisica")
                || filtroBusqueda.equals("noClienteMoral")) {
            Cliente cliente = clienteService.buscaClave(datos[1]);
            if (cliente != null) {
                id = cliente.getClienteid();
            }
            filtro = "clienteid";
            if (filtroBusqueda == "clavePersonaFisica") {
                personaFisica = personaFisicaService.buscaPersona(filtro, id);
            } else {
                lPersonaMoral = personaMoralService.buscaPersonaMoral(filtro, id);
            }

        } else if (filtroBusqueda.equals("curpfisica")) {
            Persona persona
                    = personaService.buscaPersona(datos[1]);
            if (persona != null) {
                id = persona.getPersonaid();
            }
            filtro = "personaid";
            personaFisica = personaFisicaService.buscaPersona(filtro, id);
        } else if (filtroBusqueda.equals("rfcfisica")) {
            Cliente clienterfc = clienteService.buscaRFC(datos[1]);
            if (clienterfc != null) {
                id = clienterfc.getClienteid();
            }
            filtro = "clienteid";
            personaFisica = personaFisicaService.buscaPersona(filtro, id);
        } else if (filtroBusqueda.equals("noidentificacion")) {
            personaFisica = personaFisicaService.buscaNoidentificacion(datos[1]);
        }

        if (personaFisica != null) {
            CodigoPostal cp = personaFisica.getClienteid().getDireccionid().getCodigopostalid();
            cp2 = cp.getCodigopostalid();
            codP = String.valueOf(cp2);
            datosPersona[0] = "personaFisica";
            datosPersona[1] = personaFisica.getPersonaid().getNombre();
            datosPersona[2] = personaFisica.getPersonaid().getApaterno();
            datosPersona[3] = personaFisica.getPersonaid().getAmaterno();
            datosPersona[4] = personaFisica.getPersonaid().getCurp();
            datosPersona[5] = personaFisica.getPersonaid().getSexoid().getSexoid().toString();
            datosPersona[6] = personaFisica.getFechanacimiento().toString();
            datosPersona[7] = personaFisica.getTipoidentidadid().getIdentificacionid().toString();
            datosPersona[8] = personaFisica.getEstatusidentificacionid().getEstatusidentid().toString();
            datosPersona[9] = personaFisica.getActividadid().getActividadid().toString();
            datosPersona[10] = personaFisica.getClienteid().getCorreoelectronico();
            datosPersona[11] = personaFisica.getClienteid().getRfc();
            datosPersona[12] = codP;
            datosPersona[13] = personaFisica.getClienteid().getDireccionid().getCalle();
            datosPersona[14] = personaFisica.getClienteid().getDireccionid().getColonia();
            datosPersona[15] = personaFisica.getClienteid().getClave();
            datosPersona[16] = personaFisica.getIdentificacionoficial().toString();
        } else {
            Iterator iterator = lPersonaMoral.iterator();
            while (iterator.hasNext()) {
                Object[] tuple = (Object[]) iterator.next();
                datosPersona[0] = "personaMoral";
                datosPersona[1] = (String) tuple[4];
                datosPersona[2] = String.valueOf(tuple[0]).toString();
                datosPersona[3] = (String) tuple[10];
            }
        }

        return datosPersona;
    }

    /**
     * Método que genera la nueva clave del cliente
     *
     * @return
     */
    public String generaClave() {
        String clave = "";
        if (clienteServiceClave.clave() != null) {
            clave = clienteServiceClave.clave().getClave();
        }
        String nuevaClave = "";
        int numero;
        if (clave == "") {
            nuevaClave = "DH-00001";
        } else {
            //Esta parte de la cadena se queda con DH-
            String inicio = clave.substring(0, 3);
            //Solo toma la parte de los números despues de el guión 
            String fin = clave.substring(3, 8);
            //Parseamos el número devuelto a entero para poder sumar una unidad
            numero = Integer.parseInt(fin);
            numero = numero + 1;
            //se le aplica el formato Formatter para que se rellene de ceros a la
            // izquierda hasta llegar a una cantidad de 5 unidades.
            Formatter fmt = new Formatter();
            fmt.format("%05d", numero);
            nuevaClave = inicio + String.valueOf(fmt);
        }

        return nuevaClave;
    }

    /**
     * Este metodo traera de la sesion iniciada.
     *
     * @return
     */
    public String usuarioEnSesion() {

        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        String nicknamePrincipal = null;

        if (principal instanceof UserDetails) {
            //Es igual al usuario que esta en sesion
            return nicknamePrincipal = ((UserDetails) principal).getUsername();
        } else {
            //Es igual a usuario anonimo
            return nicknamePrincipal = principal.toString();
        }
    }

    /**
     * Este metodo verificara que un usuario este autenticado correctamente
     */
    private boolean estaUsuarioAnonimo() {
        final Authentication autenticacion = SecurityContextHolder.getContext().getAuthentication();

        AuthenticationTrustResolver authenticationTrustResolver = new AuthenticationTrustResolverImpl();
        return authenticationTrustResolver.isAnonymous(autenticacion);
    }
    
}
