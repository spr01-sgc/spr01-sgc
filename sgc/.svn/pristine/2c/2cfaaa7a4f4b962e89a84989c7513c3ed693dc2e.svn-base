/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.controller;

import com.soma.transmisor.model.BitacoraPago;
import com.soma.transmisor.model.CausaRechazo;
import com.soma.transmisor.model.EstatusPago;
import com.soma.transmisor.model.Usuario;
import com.soma.transmisor.service.BitacoraPagoService;
import com.soma.transmisor.service.EstatusPagoService;
import com.soma.transmisor.service.PagoService;
import com.soma.transmisor.service.UsuarioService;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationTrustResolver;
import org.springframework.security.authentication.AuthenticationTrustResolverImpl;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

/**
 *
 * @author LUIS-SOMA
 */
@Controller
@RequestMapping("/")
public class ControllerPago {
    @Autowired
    UsuarioService usuarioService;
    @Autowired
    EstatusPagoService estatusPagoService;
    @Autowired
    BitacoraPagoService bitacoraPagoService;
    @Autowired
    PagoService pagoService;

    @RequestMapping(value = {"/pago"}, method = RequestMethod.GET)
    public String pago(ModelMap model) {
        if (!estaUsuarioAnonimo()) {
            //trae los datos de la tabla entidad
            /*List<Entidad> lEntidad = entidadService.showEntidad();
            List<CodigoPostal> lCodigoPostal = codigoPostalService.showCodigoPostal();
            List<Sexo> lSexo = sexoService.showSexo();
            List<TipoTelefono> lTipoTelefono = tipoTelefonoService.showTipoTelefono();
           // List<Telefono> lTelefono = telefonoService.showTelefono();
            // enviar los datos JSP
            model.addAttribute("lEntidad", lEntidad);
            model.addAttribute("lCodigoPostal", lCodigoPostal);
            model.addAttribute("lSexo", lSexo);
            model.addAttribute("lTipoTelefono", lTipoTelefono);
            //model.addAttribute("lTelefono", lTelefono);*/

            return "pago";
        }
        return "login";
    }

       
     /**
     * Este metodo traera de la sesion iniciada.
     *
     * @return
     */
    public String usuarioEnSesion() {

        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        String nicknamePrincipal = null;

        if (principal instanceof UserDetails) {
            //Es igual al usuario que esta en sesion
            return nicknamePrincipal = ((UserDetails) principal).getUsername();
        } else {
            //Es igual a usuario anonimo
            return nicknamePrincipal = principal.toString();
        }
    }

    /**
     * Este metodo verificara que un usuario este autenticado correctamente
     */
    private boolean estaUsuarioAnonimo() {
        final Authentication autenticacion = SecurityContextHolder.getContext().getAuthentication();

        AuthenticationTrustResolver authenticationTrustResolver = new AuthenticationTrustResolverImpl();
        return authenticationTrustResolver.isAnonymous(autenticacion);
    }
    
            //para redireccionar a bitacora de acciones de usuario y verlas acciones
    @RequestMapping(value = {"/bitacoraPago"}, method = RequestMethod.GET)
    public String bitacoraPago(ModelMap model) {
        if (!estaUsuarioAnonimo()) {
            //trae los datos de la tabla 
            List<BitacoraPago> lBitaPago = bitacoraPagoService.showBitacoraP();
            // enviar los datos JSP
            model.addAttribute("lBitaPago", lBitaPago);

            return "bitacoraPago";
        }
        return "login";
    }
    
        /*metodo para insertar a Bitacora de Pago */
    public String bitacoraPagos(String metodo) {
        if (!estaUsuarioAnonimo()) {
            BitacoraPago bitaPago= new BitacoraPago();
            Date fecha = new Date();
            //Trae el usuario que ha inciado sesion
            Usuario usuarioid = usuarioService.busquedaNinckname(usuarioEnSesion());
            //del usuario se trae el id
            usuarioid.getUsuarioid();
            int estatusPag = 0;
            CausaRechazo causa=new CausaRechazo();
            causa.setDescripcion("expiro el dia");
            causa.setBitapagoid(bitaPago);
            //dependiendo el metodo ejecutado se pasa el id de la accion realizada
            switch (metodo) {
                case "Registrado":
                    estatusPag = 1;
                    break;
                case "Enviado":
                    estatusPag = 2;
                    break;
                case "Cancelado":
                    estatusPag = 3;
                    break;
                case "Rechazado":
                    estatusPag = 4;
                    break;
                default:
                    break;
            }
            //se hace el insert a la tabla bitacoraAccionesUsuario
            EstatusPago estatus = estatusPagoService.buscaId(estatusPag);
            estatus.getEstatusid();
            bitaPago.setUsuarioid(usuarioid);
            bitaPago.setFecha(fecha);
            bitaPago.setEstatusid(estatus);
            if (bitacoraPagoService.save(bitaPago)) {
                return "exito";
            } else {
                return "error";
            }
        }
        return "login";
    }


}