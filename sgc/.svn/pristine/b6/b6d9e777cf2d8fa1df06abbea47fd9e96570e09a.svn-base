/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soma.transmisor.controller;

import com.soma.transmisor.model.CargoPolitico;
import com.soma.transmisor.model.Ciudad;
import com.soma.transmisor.model.EstatusPba;
import com.soma.transmisor.model.Familiar;
import com.soma.transmisor.model.Parentesco;
import com.soma.transmisor.model.Pep;
import com.soma.transmisor.model.Persona;
import com.soma.transmisor.model.Sexo;
import com.soma.transmisor.service.AccionService;
import com.soma.transmisor.service.BitaAccionesUsuarioService;
import com.soma.transmisor.service.CargoPoliticoService;
import com.soma.transmisor.service.CiudadService;
import com.soma.transmisor.service.EstatusPbaService;
import com.soma.transmisor.service.FamiliarService;
import com.soma.transmisor.service.ParentescoService;
import com.soma.transmisor.service.PepService;
import com.soma.transmisor.service.SexoService;
import com.soma.transmisor.service.UsuarioService;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationTrustResolver;
import org.springframework.security.authentication.AuthenticationTrustResolverImpl;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 *
 * @author JASMIN-SOMA
 */
@Controller
@RequestMapping("/")
public class ControllerPep {
    
    @Autowired
    UsuarioService usuarioService;
    @Autowired
    AccionService accionService;
    @Autowired
    BitaAccionesUsuarioService bitaAccionesUsuarioService;
    @Autowired
    SexoService sexoService;
    @Autowired
    EstatusPbaService estatusPbaService;
    @Autowired
    PepService pepService;
    @Autowired
    CargoPoliticoService cargoPoliticoService;
    @Autowired
    CiudadService ciudadServic;
    @Autowired
    FamiliarService familiarService;
    @Autowired
    ParentescoService parentescoService;
    
    @RequestMapping(value = {"/pep"}, method = RequestMethod.GET)
    public String pep(ModelMap model) {
        if (!estaUsuarioAnonimo()) {
            //trae los datos de la tabla delito
            List<Pep> lPep = pepService.showPep();
            // enviar los datos JSP
            model.addAttribute("lPep", lPep);
            List<Sexo> lSexo = sexoService.showSexo();
            model.addAttribute("lSexo", lSexo);
            List<CargoPolitico> lCargoPolitico = cargoPoliticoService.showCargoP();
            model.addAttribute("lCargoPolitico", lCargoPolitico);
            List<EstatusPba> lEstPba = estatusPbaService.showEstatus();
            model.addAttribute("lEstPba", lEstPba);
            List<Ciudad> lCiudad = ciudadServic.showCiudad();
            model.addAttribute("lCiudad", lCiudad);
            
            List<Familiar> lFamiliar = familiarService.showFamiliar();
            model.addAttribute("lFamiliar", lFamiliar);
           
            /*List<Familiar> lFamiliarPep = familiarService.showFamiliarPep();
            model.addAttribute("lFamiliarPep", lFamiliarPep);*/
            List<Parentesco> lPare = parentescoService.showParentesco();
            model.addAttribute("lPare", lPare);
            return "pep";
        }
        return "login";
    }

    /*
     * Metodo para agregar una PEP     * 
     */
    @RequestMapping(value = "/pep/agregarPep", method = RequestMethod.POST)
    public @ResponseBody
    String agregarPep(@RequestParam(value = "datos[]") String datos[]) throws ParseException {
        if (!estaUsuarioAnonimo()) {
            for (String dato : datos) {
                if (dato.equals("")) {
                    // si hay datos vacios
                    return "errorDato";
                }
            }
            // creacion de objeto
            SimpleDateFormat formatoDelTexto = new SimpleDateFormat("yyyy-MM-dd");
            Date fechaVigente;
            
            fechaVigente = formatoDelTexto.parse(datos[0]);
            Sexo lSexo = sexoService.buscaClave(Integer.parseInt(datos[7]));
            Persona perPep = new Persona();
            perPep.setNombre(datos[3]);
            perPep.setApaterno(datos[4]);
            perPep.setAmaterno(datos[5]);
            perPep.setCurp(datos[6]);
            perPep.setSexoid(lSexo);
            
            Pep pep = new Pep();
            pep.setFechavigente(fechaVigente);
            pep.setPersonaid(perPep);
            CargoPolitico cargo = cargoPoliticoService.buscaId(Integer.parseInt(datos[1]));
            pep.setCargoPolitico(cargo);
            Ciudad ciudad = ciudadServic.buscaId(Integer.parseInt(datos[2]));
            pep.setCiudad(ciudad);
            EstatusPba estatus = estatusPbaService.buscarId(Integer.parseInt(datos[8]));
            pep.setEstatuspbapepid(estatus);

//guarda en arreglo datos
            if (pepService.save(pep)) {
                /*uso del metodo bitacoraAcciones de la clase Bitacora
                Usuario usuarioid = usuarioService.busquedaNinckname(usuarioEnSesion());
                usuarioid.getUsuarioid();*/
                
                return "exito";
                
            } else {
                return "error";
            }
        }
        return "errorAcceso";
    }

    /*
     * Metodo para actaulizar una PEP     * 
     */
    @RequestMapping(value = "/pep/actualizarPep", method = RequestMethod.POST)
    public @ResponseBody
    String actualizarPep(@RequestParam(value = "datos[]") String datos[]) throws ParseException {
        if (!estaUsuarioAnonimo()) {
            for (String dato : datos) {
                if (dato.equals("")) {
                    // si hay datos vacios
                    return "errorDato";
                }
            }
            List<Pep> lPep = pepService.showPep();
            if (!lPep.isEmpty()) {
                for (Pep pep : lPep) {
                    if (pep.getPepid() == Integer.parseInt(datos[9])) {

                        // creacion de objeto
                        SimpleDateFormat formatoDelTexto = new SimpleDateFormat("yyyy-MM-dd");
                        Date fechaVigente;
                        
                        fechaVigente = formatoDelTexto.parse(datos[0]);
                        Sexo lSexo = sexoService.buscaClave(Integer.parseInt(datos[7]));
                        
                        pep.getPersonaid().setNombre(datos[3]);
                        pep.getPersonaid().setApaterno(datos[4]);
                        pep.getPersonaid().setAmaterno(datos[5]);
                        pep.getPersonaid().setCurp(datos[6]);
                        pep.getPersonaid().setSexoid(lSexo);
                        
                        pep.setFechavigente(fechaVigente);
                        CargoPolitico cargo = cargoPoliticoService.buscaId(Integer.parseInt(datos[1]));
                        pep.setCargoPolitico(cargo);
                        Ciudad ciudad = ciudadServic.buscaId(Integer.parseInt(datos[2]));
                        pep.setCiudad(ciudad);
                        EstatusPba estatus = estatusPbaService.buscarId(Integer.parseInt(datos[8]));
                        pep.setEstatuspbapepid(estatus);

//guarda en arreglo datos
                        if (pepService.update(pep)) {
                            /*uso del metodo bitacoraAcciones de la clase Bitacora
                Usuario usuarioid = usuarioService.busquedaNinckname(usuarioEnSesion());
                usuarioid.getUsuarioid();*/
                            
                            return "exito";
                            
                        } else {
                            return "error";
                        }
                    }
                }
            }
        }
        return "errorAcceso";
    }

    /*
     * Metodo para agregar una PEP     * 
     */
    @RequestMapping(value = "/pep/agregarFamiliar", method = RequestMethod.POST)
    public @ResponseBody
    String agregarFamiliar(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {
            for (String dato : datos) {
                if (dato.equals("")) {
                    // si hay datos vacios
                    return "errorDato";
                }
            }
            Familiar fam = new Familiar();
            Sexo lSexo = sexoService.buscaClave(Integer.parseInt(datos[5]));
            Persona perPep = new Persona();
            perPep.setNombre(datos[1]);
            perPep.setApaterno(datos[2]);
            perPep.setAmaterno(datos[3]);
            perPep.setCurp(datos[4]);
            perPep.setSexoid(lSexo);
            fam.setPersonaid(perPep);
            Pep pep = pepService.busquedaId(Integer.parseInt(datos[0]));
            fam.setPepid(pep);
            Parentesco parentesco=parentescoService.buscaId(Integer.parseInt(datos[6]));
            fam.setParentescoid(parentesco);

//guarda en arreglo datos
            if (familiarService.save(fam)) {
                /*uso del metodo bitacoraAcciones de la clase Bitacora
                Usuario usuarioid = usuarioService.busquedaNinckname(usuarioEnSesion());
                usuarioid.getUsuarioid();*/
                
                return "exito";
                
            } else {
                return "error";
            }
        }
        return "errorAcceso";
    }

    /*
     * Metodo para actaulizar una PEP     * 
     */
    @RequestMapping(value = "/pep/actualizarFamiliar", method = RequestMethod.POST)
    public @ResponseBody
    String actualizarFamiliar(@RequestParam(value = "datos[]") String datos[]){
        if (!estaUsuarioAnonimo()) {
            for (String dato : datos) {
                if (dato.equals("")) {
                    // si hay datos vacios
                    return "errorDato";
                }
            }
            List<Familiar> lFamiliar = familiarService.showFamiliar();
            if (!lFamiliar.isEmpty()) {
                for (Familiar fam : lFamiliar) {
                    if (fam.getFamiliarid()==Integer.parseInt(datos[7])) {
                        Sexo lSexo = sexoService.buscaClave(Integer.parseInt(datos[5]));
                        
                        fam.getPersonaid().setNombre(datos[1]);
                        fam.getPersonaid().setApaterno(datos[2]);
                        fam.getPersonaid().setAmaterno(datos[3]);
                        fam.getPersonaid().setCurp(datos[4]);
                        fam.getPersonaid().setSexoid(lSexo);
                        Parentesco lParentesco=parentescoService.buscaId(Integer.parseInt(datos[6]));
                        fam.setParentescoid(lParentesco);
                        Pep pep=pepService.busquedaId(Integer.parseInt(datos[0]));
                        fam.setPepid(pep);
                        

//guarda en arreglo datos
                        if (familiarService.update(fam)) {
                            /*uso del metodo bitacoraAcciones de la clase Bitacora
                Usuario usuarioid = usuarioService.busquedaNinckname(usuarioEnSesion());
                usuarioid.getUsuarioid();*/
                            
                            return "exito";
                            
                        } else {
                            return "error";
                        }
                    }
                }
            }
        }
        return "errorAcceso";
    }
       //Metodo para eliminar un  Delito
    @RequestMapping(value = "/pep/eliminarFamiliar", method = RequestMethod.POST)
    public @ResponseBody
    String eliminarFamiliar(@RequestParam(value = "datos[]") String datos[]) {
        if (!estaUsuarioAnonimo()) {
            for (String dato : datos) {
                if (dato.equals("")) {
                    // si hay datos vacios
                    return "errorDato";
                }
            }//termina de recorrer el arreglo

            List<Familiar> lFamiliar = familiarService.showFamiliar();
            if (!lFamiliar.isEmpty()) {
                for (Familiar fam : lFamiliar) {
                    //obtiene el id del delitoa a eliminar
                    int famId = Integer.parseInt(datos[0]);
                    if (fam.getFamiliarid() == famId) {
                        fam.setFamiliarid(Integer.parseInt(datos[0]));
                        if (familiarService.delete(famId)) {                            
                            //bitacoraAcciones("eliminarDelito", usuarioid);
                            return "exito";
                        } else {
                            return "error";
                        }
                    }
                }//end for
            }//si no esta vacia la lista de delitos
        }//el usuario es anonimo

        return "errorAcceso";

    }
    /**
     * Este metodo verificara que un usuario este autenticado correctamente
     */
    private boolean estaUsuarioAnonimo() {
        final Authentication autenticacion = SecurityContextHolder.getContext().getAuthentication();
        
        AuthenticationTrustResolver authenticationTrustResolver = new AuthenticationTrustResolverImpl();
        return authenticationTrustResolver.isAnonymous(autenticacion);
    }

    /**
     * Este metodo traera de la sesion iniciada.
     *
     * @return
     */
    public String usuarioEnSesion() {
        
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        
        String nicknamePrincipal = null;
        
        if (principal instanceof UserDetails) {
            //Es igual al usuario que esta en sesion
            return nicknamePrincipal = ((UserDetails) principal).getUsername();
        } else {
            //Es igual a usuario anonimo
            return nicknamePrincipal = principal.toString();
        }
    }
    
}
